import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Cookie } from 'ng2-cookies';
var LogglyService = /** @class */ (function () {
    function LogglyService(_http) {
        this._http = _http;
        this.LOGGLY_INPUT_PREFIX = 'https://';
        this.LOGGLY_COLLECTOR_DOMAIN = 'logs-01.loggly.com';
        this.LOGGLY_SESSION_KEY = 'logglytrackingsession';
        this.LOGGLY_SESSION_KEY_LENGTH = this.LOGGLY_SESSION_KEY + 1;
        this.LOGGLY_PROXY_DOMAIN = 'loggly';
    }
    LogglyService.prototype.setProtocol = function (protocol) {
        this.LOGGLY_INPUT_PREFIX = protocol;
    };
    LogglyService.prototype.uuid = function () {
        // lifted from here -> http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    LogglyService.prototype.setKey = function (tracker, key) {
        tracker.key = key;
        tracker.setSession();
        this.setInputUrl(tracker);
    };
    LogglyService.prototype.setTag = function (tracker, tag) {
        tracker.tag = tag;
    };
    LogglyService.prototype.setDomainProxy = function (tracker, useDomainProxy) {
        tracker.useDomainProxy = useDomainProxy;
        // refresh inputUrl value
        this.setInputUrl(tracker);
    };
    LogglyService.prototype.setSendConsoleError = function (tracker, sendConsoleErrors) {
        tracker.sendConsoleErrors = sendConsoleErrors;
        if (tracker.sendConsoleErrors === true) {
            var _onerror_1 = window.onerror;
            // send console error messages to Loggly
            window.onerror = function (msg, url, line, col) {
                tracker.push({
                    category: 'BrowserJsException',
                    exception: {
                        message: msg,
                        url: url,
                        lineno: line,
                        colno: col,
                    }
                });
                if (_onerror_1 && typeof _onerror_1 === 'function') {
                    _onerror_1.apply(window, arguments);
                }
            };
        }
    };
    LogglyService.prototype.setInputUrl = function (tracker) {
        if (tracker.useDomainProxy === true) {
            tracker.inputUrl = this.LOGGLY_INPUT_PREFIX
                + window.location.host
                + '/'
                + this.LOGGLY_PROXY_DOMAIN
                + '/inputs/'
                + tracker.key
                + '/tag/'
                + tracker.tag;
        }
        else {
            tracker.inputUrl = this.LOGGLY_INPUT_PREFIX
                + (tracker.logglyCollectorDomain || this.LOGGLY_COLLECTOR_DOMAIN)
                + '/inputs/'
                + tracker.key
                + '/tag/'
                + tracker.tag;
        }
    };
    LogglyService.prototype.setSession = function (session_id) {
        if (session_id) {
            this.session_id = session_id;
            this.setCookie(this.session_id);
        }
        else if (!this.session_id) {
            this.session_id = this.readCookie();
            if (!this.session_id) {
                this.session_id = this.uuid();
                this.setCookie(this.session_id);
            }
        }
    };
    LogglyService.prototype.push = function (data) {
        var type = typeof data;
        if (!data || !(type === 'object' || type === 'string')) {
            return;
        }
        var self = this;
        if (type === 'string') {
            data = {
                'text': data
            };
        }
        else {
            if (data.logglyCollectorDomain) {
                self.logglyCollectorDomain = data.logglyCollectorDomain;
                return;
            }
            if (data.sendConsoleErrors !== undefined) {
                this.setSendConsoleError(self, data.sendConsoleErrors);
            }
            if (data.tag) {
                this.setTag(self, data.tag);
            }
            if (data.useDomainProxy) {
                this.setDomainProxy(self, data.useDomainProxy);
            }
            if (data.logglyKey) {
                this.setKey(self, data.logglyKey);
                return;
            }
            if (data.session_id) {
                self.setSession(data.session_id);
                return;
            }
        }
        if (!self.key) {
            return;
        }
        self.track(data).subscribe(function (response) {
            // Success
        }, function (error) {
            console.error(error);
        });
    };
    LogglyService.prototype.track = function (data) {
        // inject session id
        data.sessionId = this.session_id;
        return this._http.post(this.inputUrl, data, { headers: new HttpHeaders().set('Content-Type', 'text/plain') });
    };
    LogglyService.prototype.readCookie = function () {
        var cookie = Cookie.get(this.LOGGLY_SESSION_KEY);
        if (cookie) {
            var i = cookie.indexOf(this.LOGGLY_SESSION_KEY);
            if (i < 0) {
                return false;
            }
            else {
                var end = cookie.indexOf(';', i + 1);
                end = end < 0 ? cookie.length : end;
                return cookie.slice(i + this.LOGGLY_SESSION_KEY_LENGTH, end);
            }
        }
        else {
            return false;
        }
    };
    LogglyService.prototype.setCookie = function (value) {
        Cookie.set(this.LOGGLY_SESSION_KEY, value);
    };
    LogglyService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [HttpClient])
    ], LogglyService);
    return LogglyService;
}());
export { LogglyService };
//# sourceMappingURL=data:application/json;base64,